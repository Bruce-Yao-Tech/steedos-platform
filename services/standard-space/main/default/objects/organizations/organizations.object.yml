name: organizations
label: Department
icon: team_member
enable_search: true
enable_tree: true
enable_enhanced_lookup: true
enable_inline_edit: false
version: 2
pages:
  lookup: |-
    {
      "source": {
        "url": "${context.rootUrl}/service/api/organizations/root",
        "method": "get",
        "cache": 300000,
        "data": null,
        "headers": {
          "Authorization": "Bearer ${context.tenantId},${context.authToken}"
        },
        "requestAdaptor": "\n    return api;\n    ",
        "adaptor": "\n    return payload;\n    "
      },
      "deferApi": {
        "method": "post",
        "url": "${context.rootUrl}/graphql",
        "data": {
          "$self": "$$",
          "self": "$$"
        },
        "headers": {
          "Authorization": "Bearer ${context.tenantId},${context.authToken}"
        },
        "cache": 3000,
        "requestAdaptor": "var selfData = JSON.parse(JSON.stringify(api.data.self));\nlet filters = [];\nvar dep = selfData._id;\nif (dep) {\n  filters = [['parent', '=', dep]];\n}\nreturn Object.assign({}, api, {\n  data: {\n    query: '{rows:organizations(filters: ' + JSON.stringify(filters) + ', top: 5000, skip: 0, sort: \"sort_no desc\"){_id,name,sort_no,hidden,_display:_ui{sort_no,hidden},parent,children}}'\n  }\n}); ",
        "adaptor": "var data = payload.data;\nif (data.children) {\n  return payload;\n}\ndata.rows = data.rows.map(function (optionItem) {\n  optionItem.defer = !!(optionItem.children && optionItem.children.length);\n  delete optionItem.children;\n  return optionItem;\n});\n\ndata.children = data.rows;\ndelete data.rows;\ndelete data.count;\nreturn payload;"
      }
    }