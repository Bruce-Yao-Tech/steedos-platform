name: object_triggers
icon: apex
label: Object Triggers
fields:
  name:
    type: text
    label: Name
    searchable: true
    index: true
    required: true
  listenTo:
    label: Object
    type: master_detail
    reference_to: objects
    reference_to_field: name
    required: true
  when:
    label: Execution Time Option
    type: lookup
    required: true
    multiple: true
    is_wide: true
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function () {
              return [{
                label: "新增记录之前",
                value: "beforeInsert",
                icon: "asset_relationship"
              }, {
                label: "新增记录之后",
                value: "afterInsert",
                icon: "asset_relationship"
              }, {
                label: "修改记录之前",
                value: "beforeUpdate",
                icon: "asset_relationship"
              }, {
                label: "修改记录之后",
                value: "afterUpdate",
                icon: "asset_relationship"
              }, {
                label: "删除记录之前",
                value: "beforeDelete",
                icon: "asset_relationship"
              }, {
                label: "删除记录之后",
                value: "afterDelete",
                icon: "asset_relationship"
              }, {
                label: "查下记录之前",
                value: "beforeFind",
                icon: "asset_relationship"
              }];
            }
  isEnabled:
    label: Enabled
    type: boolean
  handler:
    label: Handler
    type: code
    language: javascript
    is_wide: true
    required: true
    defaultValue: |-
      const { params, getObject, getUser, call } = ctx;
    editorDidMount: |-
      const result = Steedos.authRequest("/service/api/suggestions/trigger", {async: false});
      const objectSuggestions = [{
        label: "objects",
        insertText: "objects"
      }];
      _.each(result.objects.data, (item)=>{
          objectSuggestions.push({
            label: `objects.${item.label}`,
            insertText: `objects.${item.insertText}`,
            documentation: item.documentation
          });
          _.each(result.objects.props, (prop)=>{
            objectSuggestions.push({
              label: `objects.${item.label}.${prop.label}`,
              kind: monaco.languages.CompletionItemKind.Function,
              insertText: `objects.${item.insertText}.${prop.label}`,
              documentation: prop.documentation,
            })
        })
      })
      return monaco.languages.registerCompletionItemProvider('javascript', {
        provideCompletionItems: function(model, position) {
          const lineContent = model.getLineContent(position.lineNumber);
          var arr = lineContent.split(" ");
          var lastWord = arr.pop();
          var afterLastSpaceText = lineContent.substring(lineContent.lastIndexOf(" ") + 1);
          return { suggestions: _.cloneDeep(_.filter(objectSuggestions, (sug)=>{
            return sug.label.startsWith(afterLastSpaceText)
          })) };
        }
      });
paging:
  enabled: false
list_views:
  all:
    columns:
      - name
      # - label
      - object
      # - 'on'
      - when
      - is_enable
    label: All
    filter_scope: space
permission_set:
  user:
    allowCreate: false
    allowDelete: false
    allowEdit: false
    allowRead: false
    modifyAllRecords: false
    viewAllRecords: false
  admin:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true