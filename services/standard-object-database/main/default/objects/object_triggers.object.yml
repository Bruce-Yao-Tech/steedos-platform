name: object_triggers
icon: apex
label: Object Triggers
version: 2.0
hidden: true
fields:
  _name:
    type: text
    label: Name
    searchable: true
    index: true
    required: true
  name: 
    data_type: text
    formula: listenTo.name+"_"+_name
    formula_blank_value: blanks
    type: formula
    visible_on: "{{false}}"
  listenTo:
    label: Object
    type: master_detail
    reference_to: objects
    reference_to_field: name
    required: true
  when:
    label: Execution Time Option
    type: select
    required: true
    multiple: true
    is_wide: true
    options: [{
                label: "新增记录之前",
                value: "beforeInsert"
              }, {
                label: "新增记录之后",
                value: "afterInsert"
              }, {
                label: "修改记录之前",
                value: "beforeUpdate"
              }, {
                label: "修改记录之后",
                value: "afterUpdate"
              }, {
                label: "删除记录之前",
                value: "beforeDelete"
              }, {
                label: "删除记录之后",
                value: "afterDelete"
              }, {
                label: "查下记录之前",
                value: "beforeFind"
              }]
  isEnabled:
    label: Enabled
    type: boolean
    defaultValue: true
  handler:
    label: Handler
    type: code
    language: javascript
    is_wide: true
    required: true
    defaultValue: |-
      const { params, getObject, getUser, call } = ctx;
    editorDidMount: |-
      const result = Steedos.authRequest("/service/api/suggestions/trigger", {async: false});
      const objectSuggestions = [{
        label: "objects",
        insertText: "objects"
      }];
      _.each(result.objects.data, (item)=>{
          objectSuggestions.push({
            label: `objects.${item.label}`,
            insertText: `objects.${item.insertText}`,
            documentation: item.documentation
          });
          _.each(result.objects.props, (prop)=>{
            objectSuggestions.push({
              label: `objects.${item.label}.${prop.label}`,
              kind: monaco.languages.CompletionItemKind.Function,
              insertText: `objects.${item.insertText}.${prop.label}`,
              documentation: prop.documentation,
            })
        })
      })
      return monaco.languages.registerCompletionItemProvider('javascript', {
        provideCompletionItems: function(model, position) {
          const lineContent = model.getLineContent(position.lineNumber);
          var arr = lineContent.split(" ");
          var lastWord = arr.pop();
          var afterLastSpaceText = lineContent.substring(lineContent.lastIndexOf(" ") + 1);
          return { suggestions: _.cloneDeep(_.filter(objectSuggestions, (sug)=>{
            return sug.label.startsWith(afterLastSpaceText)
          })) };
        }
      });
  record_permissions: 
    type: object
    visible_on: "{{global.mode ==='read' ? true : false}}"
  is_system:
    type: boolean
    label: System
    readonly: true
    visible_on: "{{global.mode ==='read' ? true : false}}"
    disabled: true
paging:
  enabled: false
list_views:
  all:
    columns:
      - name
      - when
      - isEnabled
      - is_system
    label: All
    filter_scope: space
permission_set:
  user:
    allowCreate: false
    allowDelete: false
    allowEdit: false
    allowRead: false
    modifyAllRecords: false
    viewAllRecords: false
  admin:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true